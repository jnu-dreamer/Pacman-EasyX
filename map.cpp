#include "map.hpp"
#include "config.h"
#include <graphics.h>

int mp[ROWS][COLS] = // 2 表示空地，1 表示墙，0 表示豆子
{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1},
	{1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,3,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,3,1},
	{1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1},
	{1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1},
	{2,2,2,2,2,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,1,0,1,1,0,0,0,0,0,1,1,0,1,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,1,2,2,2,2,2},
	{1,1,1,1,1,1,0,1,0,1,2,2,2,2,2,2,2,1,0,1,0,1,1,1,1,1,1},
	{0,0,0,0,0,0,0,1,0,1,2,2,2,2,2,2,2,1,0,1,0,0,0,0,0,0,0},
	{1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1},
	{2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,2,2,2,2,2},
	{2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2},
	{2,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,2},
	{2,1,3,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,3,1,2},
	{2,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,2},
	{2,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,2},
	{2,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,2},
	{2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2},
	{2,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,2},
	{2,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,2},
	{2,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,2},
	{2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2},
	{2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2}
};

int mpcopy[ROWS][COLS] = // 2 表示空地，1 表示墙，0 表示豆子
{
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1},
	{1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,3,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,3,1},
	{1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1},
	{1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1},
	{2,2,2,2,2,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,1,0,1,1,0,0,0,0,0,1,1,0,1,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,1,2,2,2,2,2},
	{1,1,1,1,1,1,0,1,0,1,2,2,2,2,2,2,2,1,0,1,0,1,1,1,1,1,1},
	{0,0,0,0,0,0,0,1,0,1,2,2,2,2,2,2,2,1,0,1,0,0,0,0,0,0,0},
	{1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1},
	{2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,2,2,2,2,2},
	{2,2,2,2,2,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,2,2,2,2,2},
	{2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2},
	{2,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,2},
	{2,1,3,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,3,1,2},
	{2,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,2},
	{2,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,2},
	{2,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,2},
	{2,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2},
	{2,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,2},
	{2,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,2},
	{2,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,2},
	{2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2},
	{2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2}
};

int vis[ROWS][COLS] = { 0 }; 
int countDots() {
    int count = 0;
    for (int i = 0; i < ROWS; i++)
        for (int j = 0; j < COLS; j++)
            if (mp[i][j] == 0)
                count++;
    return count;
}

void drawMap() {
	for (int i = 0; i < ROWS; i++)
	{
		for (int j = 0; j < COLS; j++)
		{
			int x = j * block_size;
			int y = i * block_size;

			switch (mp[i][j])
			{
			case 2: // 空地
				setfillcolor(BLACK);
				solidrectangle(x, y, x + block_size, y + block_size);
				break;
			case 1: // 墙
				setfillcolor(BLUE);
				solidrectangle(x, y, x + block_size, y + block_size);
				setlinecolor(LIGHTBLUE);
				rectangle(x, y, x + block_size, y + block_size);
				break;
			case 0: // 豆子
				setfillcolor(BLACK);
				solidrectangle(x, y, x + block_size, y + block_size);
				setfillcolor(WHITE);
				fillcircle(x + block_size / 2, y + block_size / 2, 3);
				break;
			case 3: // 无敌豆
				setfillcolor(BLACK);
				solidrectangle(x, y, x + block_size, y + block_size);
				setfillcolor(YELLOW);
				fillcircle(x + block_size / 2, y + block_size / 2, 5);
				break;
			}
		}
	}
}

bool canMoveTo(int newX, int newY) 
{
	int left = newX;
	int right = newX + 23;
	int top = newY;
	int bottom = newY + 23;

	int colL = left / block_size;
	int colR = right / block_size;
	int rowT = top / block_size;
	int rowB = bottom / block_size;

	// 检查四个角是否都不是墙
	return mp[rowT][colL] != 1 &&
		mp[rowT][colR] != 1 &&
		mp[rowB][colL] != 1 &&
		mp[rowB][colR] != 1;
}

